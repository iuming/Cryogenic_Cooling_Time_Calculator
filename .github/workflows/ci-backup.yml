name: CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # 减少测试矩阵以提高速度
          - os: windows-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.9'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      shell: bash

    - name: Install testing dependencies
      run: |
        pip install flake8 --quiet
      shell: bash

    - name: Lint with flake8 (critical errors only)
      run: |
        # 只检查严重的语法错误
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
      shell: bash

    - name: Test core calculation engine
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, '.')
        
        try:
            from core.calculation_engine import CryogenicCalculationEngine
            engine = CryogenicCalculationEngine()
            result = engine.debye_heat_capacity(100, 275)
            print(f'✓ 核心计算引擎测试通过: C(100K) = {result:.2f} J/kg/K')
        except Exception as e:
            print(f'✗ 测试失败: {e}')
            sys.exit(1)
        "
      shell: bash

    - name: Test imports
      run: |
        python -c "
        try:
            import numpy as np
            import matplotlib
            matplotlib.use('Agg')
            import matplotlib.pyplot as plt
            print('✓ 所有依赖包导入成功')
        except Exception as e:
            print(f'✗ 导入失败: {e}')
            import sys
            sys.exit(1)
        "
      shell: bash

    - name: Test simple calculator
      run: |
        python scripts/simple_calculator.py

    - name: Test calculation engine
      run: |
        python -c "
        from core.calculation_engine import CryogenicCalculationEngine
        engine = CryogenicCalculationEngine()
        result = engine.debye_heat_capacity(100, 275)
        assert result > 0, 'Heat capacity should be positive'
        print('✓ Calculation engine test passed')
        "

    - name: Test font utilities
      run: |
        python -c "
        from utils.font_utils import detect_chinese_fonts, get_safe_font
        fonts = detect_chinese_fonts()
        safe_font = get_safe_font()
        print(f'✓ Font utilities test passed, found {len(fonts)} Chinese fonts')
        "

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 mypy

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: Lint with flake8
      run: |
        flake8 . --max-line-length=127 --extend-ignore=E203,W503

  gui-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # 为GUI测试安装虚拟显示
        sudo apt-get update
        sudo apt-get install -y xvfb

    - name: Test GUI components (headless)
      run: |
        # 使用虚拟显示运行GUI测试
        xvfb-run -a python -c "
        import sys
        sys.path.insert(0, '.')
        
        # 测试GUI导入
        try:
            import tkinter as tk
            root = tk.Tk()
            root.withdraw()
            print('✓ Tkinter import successful')
            root.destroy()
        except Exception as e:
            print(f'✗ Tkinter test failed: {e}')
            sys.exit(1)
        
        # 测试matplotlib后端
        try:
            import matplotlib
            matplotlib.use('Agg')
            import matplotlib.pyplot as plt
            import numpy as np
            
            fig, ax = plt.subplots()
            x = np.linspace(0, 10, 100)
            y = np.sin(x)
            ax.plot(x, y)
            plt.close(fig)
            print('✓ Matplotlib test successful')
        except Exception as e:
            print(f'✗ Matplotlib test failed: {e}')
            sys.exit(1)
        "

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Check documentation files
      run: |
        # 检查必要的文档文件是否存在
        required_files=(
          "README.md"
          "requirements.txt"
          "docs/README.md"
          "docs/USAGE.md"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "✗ Missing required file: $file"
            exit 1
          else
            echo "✓ Found: $file"
          fi
        done
        
        # 检查README.md是否包含必要的部分
        if ! grep -q "## English" README.md; then
          echo "✗ README.md missing English section"
          exit 1
        fi
        
        if ! grep -q "## 中文" README.md; then
          echo "✗ README.md missing Chinese section"
          exit 1
        fi
        
        echo "✓ Documentation check passed"

  release:
    needs: [test, code-quality, gui-test, documentation]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史用于生成changelog

    - name: Generate release info
      id: release_info
      run: |
        # 生成版本号（基于日期）
        VERSION=$(date +"%Y.%m.%d")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # 生成changelog
        git log --oneline --since="1 day ago" > RECENT_CHANGES.md || echo "No recent changes" > RECENT_CHANGES.md
        
        echo "Generated version: $VERSION"

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.release_info.outputs.version }}
        release_name: Release v${{ steps.release_info.outputs.version }}
        body_path: RECENT_CHANGES.md
        draft: false
        prerelease: false
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
