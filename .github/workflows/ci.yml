name: CI Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # 减少测试矩阵以提高速度
          - os: windows-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.9'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      shell: bash

    - name: Test core calculation engine
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, '.')
        
        try:
            from core.calculation_engine import CryogenicCalculationEngine
            engine = CryogenicCalculationEngine()
            result = engine.debye_heat_capacity(100, 275)
            print(f'✓ 核心计算引擎测试通过: C(100K) = {result:.2f} J/kg/K')
        except Exception as e:
            print(f'✗ 测试失败: {e}')
            sys.exit(1)
        "
      shell: bash

    - name: Test imports
      run: |
        python -c "
        try:
            import numpy as np
            import matplotlib
            matplotlib.use('Agg')
            import matplotlib.pyplot as plt
            print('✓ 所有依赖包导入成功')
        except Exception as e:
            print(f'✗ 导入失败: {e}')
            import sys
            sys.exit(1)
        "
      shell: bash

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Check documentation files
      run: |
        # 检查必要的文档文件是否存在
        required_files=(
          "README.md"
          "requirements.txt"
          "docs/README.md"
          "docs/USAGE.md"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "✗ Missing required file: $file"
            exit 1
          else
            echo "✓ Found: $file"
          fi
        done
        
        # 检查README.md是否包含必要的部分
        if ! grep -q "## English" README.md; then
          echo "✗ README.md missing English section"
          exit 1
        fi
        
        if ! grep -q "## 中文" README.md; then
          echo "✗ README.md missing Chinese section"
          exit 1
        fi
        
        echo "✓ Documentation check passed"
