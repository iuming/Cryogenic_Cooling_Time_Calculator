name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    name: Unit Tests on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test core calculation engine
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        
        try:
            from core.calculation_engine import CryogenicCalculationEngine, calculate_cooling_time
            
            # 测试计算引擎初始化
            engine = CryogenicCalculationEngine()
            print('✅ Engine initialization successful')
            
            # 测试德拜比热容计算
            heat_capacity = engine.debye_heat_capacity(100, 275)
            assert heat_capacity > 0, 'Heat capacity should be positive'
            print(f'✅ Heat capacity calculation: {heat_capacity:.2f} J/kg/K')
            
            # 测试热泄漏计算
            heat_leak = engine.calculate_heat_leak(50)
            assert heat_leak['total'] > 0, 'Heat leak should be positive'
            print(f'✅ Heat leak calculation: {heat_leak[\"total\"]:.3f} W')
            
            # 测试完整计算
            result = calculate_cooling_time()
            print(f'✅ Full calculation completed')
            print(f'   Total time: {result[\"total_time_hours\"]:.1f} hours')
            
        except Exception as e:
            print(f'❌ Test failed: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
        "

    - name: Test utilities
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        
        try:
            from utils.font_utils import detect_chinese_fonts, get_safe_font
            
            # 测试字体检测
            fonts = detect_chinese_fonts()
            print(f'✅ Font detection: found {len(fonts)} Chinese fonts')
            
            # 测试安全字体配置
            safe_font = get_safe_font()
            assert isinstance(safe_font, dict), 'Safe font should return dict'
            print('✅ Safe font configuration successful')
            
        except Exception as e:
            print(f'❌ Utilities test failed: {e}')
            sys.exit(1)
        "

    - name: Test scripts
      run: |
        python scripts/test_components.py

    - name: Test simple calculator
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        
        try:
            from scripts.simple_calculator import calculate_simple_cooling_time
            
            result = calculate_simple_cooling_time()
            assert result['total_time_hours'] > 0, 'Cooling time should be positive'
            print(f'✅ Simple calculator: {result[\"total_time_hours\"]:.1f} hours')
            
        except Exception as e:
            print(f'❌ Simple calculator test failed: {e}')
            sys.exit(1)
        "

  gui-compatibility:
    name: GUI Compatibility Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk xvfb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test GUI imports (headless)
      run: |
        xvfb-run -a python -c "
        import sys
        import os
        sys.path.insert(0, '.')
        
        # 设置无头模式
        os.environ['MPLBACKEND'] = 'Agg'
        
        try:
            import tkinter as tk
            print('✅ Tkinter import successful')
            
            # 测试tkinter基本功能
            root = tk.Tk()
            root.withdraw()  # 隐藏窗口
            
            # 创建基本组件
            frame = tk.Frame(root)
            label = tk.Label(frame, text='Test')
            button = tk.Button(frame, text='Test Button')
            
            print('✅ Tkinter widgets creation successful')
            root.destroy()
            
        except Exception as e:
            print(f'❌ GUI test failed: {e}')
            sys.exit(1)
        "

    - name: Test matplotlib integration
      run: |
        python -c "
        import matplotlib
        matplotlib.use('Agg')  # 无头后端
        import matplotlib.pyplot as plt
        import numpy as np
        
        try:
            # 测试基本绘图
            fig, ax = plt.subplots()
            x = np.linspace(0, 10, 100)
            y = np.sin(x)
            ax.plot(x, y)
            ax.set_xlabel('Test X')
            ax.set_ylabel('Test Y')
            ax.set_title('Test Plot')
            
            # 保存图像以验证功能
            plt.savefig('/tmp/test_plot.png')
            plt.close(fig)
            
            print('✅ Matplotlib functionality test passed')
            
        except Exception as e:
            print(f'❌ Matplotlib test failed: {e}')
            sys.exit(1)
        "

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psutil

    - name: Performance benchmark
      run: |
        python -c "
        import time
        import psutil
        import sys
        sys.path.insert(0, '.')
        
        from core.calculation_engine import calculate_cooling_time
        
        # 内存使用基准
        process = psutil.Process()
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        print(f'Initial memory usage: {initial_memory:.1f} MB')
        
        # 计算时间基准
        start_time = time.time()
        result = calculate_cooling_time()
        end_time = time.time()
        
        final_memory = process.memory_info().rss / 1024 / 1024  # MB
        memory_increase = final_memory - initial_memory
        calculation_time = end_time - start_time
        
        print(f'Calculation time: {calculation_time:.2f} seconds')
        print(f'Memory increase: {memory_increase:.1f} MB')
        print(f'Result: {result[\"total_time_hours\"]:.1f} hours')
        
        # 性能阈值检查
        if calculation_time > 10.0:
            print('⚠️  Calculation time exceeds 10 seconds')
        else:
            print('✅ Performance test passed')
        
        if memory_increase > 100:
            print('⚠️  Memory usage increase exceeds 100 MB')
        else:
            print('✅ Memory usage acceptable')
        "
